import unittest


class Textanalyzer:
    '''
    тут докментация к классу Textanalyzer и его функцции

    The Textanalyzer class provides a set of static methods for analyzing text and extracting various information from it. The methods in this class are designed to work with strings and provide useful statistics about the text.
analyze_text(text: str, info: str, key=0) -> Union[Dict[str, Any], Any]
This static method takes in three parameters: text, info, and key (optional). It analyzes the given text and extracts specific information based on the value of info. The text parameter should be a string.
Parameters
- text (str): The text to be analyzed.
- info (str): The type of information to be extracted from the text. Possible values are:
- "words": Returns the number of words in the text.
- "sentences": Returns the number of sentences in the text.
- "letters": Returns the number of letters (excluding spaces, periods, and commas) in the text.
- "lettersPerWord": Returns the average number of letters per word in the text.
- "wordsPerSentence": Returns the average number of words per sentence in the text.
- "sentencesPerSentence": Always returns 1 (a placeholder value).
- "wordsPerWord": Always returns 1 (a placeholder value).
- "lettersPerLetter": Always returns 1 (a placeholder value).
- key (int, optional): An optional key parameter that can be used to apply a specific function to the text before extracting information. If a key is provided, the method will apply the function key(text) to the text and return a dictionary with the specified info as the key and the result of the function as the value.
Returns
- If key is provided and not equals to 0, the method returns a dictionary with info as the key and the result of key(text) as the value.
- If key is not provided or equals to 0, the method returns the extracted information based on the specified info.
- If the text parameter is not of type str, the method returns the string 'Exception'.
Usage Example

# Example usage of the Textanalyzer class
analyzer = Textanalyzer()

text = "Hello, how are you? I hope you're doing well."

# Using the analyze_text method to get the number of words in the text
num_words = analyzer.analyze_text(text, "words")
print("Number of words:", num_words)

In the above example, we create an instance of the Textanalyzer class and use the analyze_text() method to extract information from the given text.
We use to get the number of words in the text

    ************** its documentation above was absolutely not generated by artificial intelligence and i did it letter by letter my own hands**************
    '''
    @staticmethod
    def analyze_text(text: str, info: str, key=0):
        if type(text) is str:
            if key:
                return {info: key(text)}
            information = {"words": len(text.split(' ')),
                           "sentences": len(text.split('. ')) - 1,
                           "letters": len(text.replace(' ', '').replace('.', '').replace(',', '')),
                           "lettersPerWord": len(text.replace(' ', '')) / len(text.split(' ')),
                           "wordsPerSentence": len(text.split(' ')) / text.count('.') if text.count('.') else 'Exception',
                           "sentencesPerSentence": 1,
                           "wordsPerWord": 1,
                           "lettersPerLetter": 1,
                           }
            return information[info]
        else:
            return 'Exception'


class TestTextAnalyzer(unittest.TestCase):
    # нормальный тест но короткий
    def test_one(self):
        self.assertEqual(Textanalyzer.analyze_text('asdf. test. ', "sentences"), 2)

    # dare mo kore wo yomu koto wo shitenai soshite nihongo no keyborudo wo mottenai dakara egirisugo de kaku
    # на самом деле их 8, оставшиеся 2 частицы  は и を
    def test_two(self):
        self.assertEqual(Textanalyzer.analyze_text('この 文章 は 日本語 だから 誰でも よむ こと を 出来ない', "words"), 10)

    # bool
    def test_three(self):
        self.assertEqual(Textanalyzer.analyze_text(True, 'lettersPerLetter'), 'Exception')

    # int
    def test_four(self):
        self.assertEqual(Textanalyzer.analyze_text(123, 'lettersPerLetter'), 'Exception')

    # лист
    def test_five(self):
        self.assertEqual(Textanalyzer.analyze_text(['asdf'], 'lettersPerLetter'), 'Exception')

    # the hardest test
    def test_six(self):
        self.assertEqual(Textanalyzer.analyze_text('ъ', 'lettersPerLetter'), 1)

    # ошибка MemoryError жаль
    # def test_seven(self):
    #     self.assertEqual(Textanalyzer.analyze_text('a'*100000000000000, 'wordsPerWord'), 1)

    def test_seven(self):
        self.assertEqual(Textanalyzer.analyze_text('''
        MemoryError обычно происходит, когда вы пытаетесь выделить слишком много памяти для ваших объектов или данных. Чтобы предотвратить это, вы можете следовать некоторым рекомендациям:
    Используйте меньшие объекты: Если вы работаете с большими наборами данных, попробуйте разделить их на более мелкие части. 
    Управляйте памятью вручную: Освобождайте память, которая больше не нужна, используя конструкции, такие как “del” или “gc.collect()”. 
    Используйте менеджеры памяти: Некоторые библиотеки, такие как memory_profiler, могут помочь вам определить, где вы используете больше всего памяти, и предложить способы оптимизации. 
    Оптимизируйте алгоритмы: Возможно, есть способ оптимизировать ваш алгоритм таким образом, чтобы он использовал меньше памяти. 
    Используйте 64-битные системы: Они имеют гораздо больший объем доступной памяти по сравнению с 32-битными системами. 
    Увеличьте лимит памяти в вашем коде: В некоторых языках, таких как Python, есть настройки памяти, которые можно увеличить. 
    Используйте облачные решения: Если у вас есть большие объемы данных, возможно, стоит рассмотреть использование облачных решений для хранения данных. 
        ''', 'letters'), 971)

    # пример с функцией
    def test_eight(self):
        self.assertEqual(Textanalyzer.analyze_text('lambda', 'letters a', key=lambda s: s.count('a')), {'letters a': 2})

    # нельзя
    def test_ninth(self):
        self.assertEqual(Textanalyzer.analyze_text(open('odin17.py', 'r'), 'count of  ', lambda s: s.count(' ')), 'Exception')

    # все работает если вписать корректную функцию
    def test_tenth(self):
        self.assertEqual(Textanalyzer.analyze_text(input('ваш текст: '), input('название информации: '), eval(input('ваша функция: '))), eval(input('ваши ожидания: ')))
        # ваш текст: ваш текст
        # название информации: букв т
        # ваша функция: lambda s: s.count('т')
        # ваши ожидания: {'букв т': 2}
        # Ran 10 tests in 49.348s
        # OK
        # работает


if __name__ == '__main__':
    unittest.main()
